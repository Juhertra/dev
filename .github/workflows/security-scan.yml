name: security-scan
on: 
  pull_request:
    paths:
      - "**/*.py"
      - "requirements.txt"
      - "pyproject.toml"
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit[toml] safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
        continue-on-error: true
      
      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30
      
      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read Bandit results
            let banditFindings = [];
            try {
              const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              banditFindings = banditData.results || [];
            } catch (e) {
              console.log('No Bandit report found');
            }
            
            // Read Safety results
            let safetyFindings = [];
            try {
              const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              safetyFindings = safetyData.vulnerabilities || [];
            } catch (e) {
              console.log('No Safety report found');
            }
            
            // Generate comment
            let comment = '## ðŸ”’ Security Scan Results\n\n';
            
            if (banditFindings.length === 0 && safetyFindings.length === 0) {
              comment += 'âœ… No security issues found!\n';
            } else {
              if (banditFindings.length > 0) {
                comment += `### Bandit Findings (${banditFindings.length})\n`;
                banditFindings.slice(0, 5).forEach(finding => {
                  comment += `- **${finding.test_name}**: ${finding.issue_severity} - ${finding.issue_text}\n`;
                });
                if (banditFindings.length > 5) {
                  comment += `- ... and ${banditFindings.length - 5} more findings\n`;
                }
                comment += '\n';
              }
              
              if (safetyFindings.length > 0) {
                comment += `### Dependency Vulnerabilities (${safetyFindings.length})\n`;
                safetyFindings.slice(0, 5).forEach(vuln => {
                  comment += `- **${vuln.package_name}**: ${vuln.advisory}\n`;
                });
                if (safetyFindings.length > 5) {
                  comment += `- ... and ${safetyFindings.length - 5} more vulnerabilities\n`;
                }
              }
            }
            
            comment += '\nðŸ“Š Full reports available in workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
