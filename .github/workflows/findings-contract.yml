# P4 - CI Configuration for Findings Contract
# GitHub Actions workflow to enforce findings contract compliance

name: Findings Contract CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  findings-contract-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"
        pip install pytest jsonschema
    
    - name: Run findings normalization unit tests
      run: |
        python -m pytest tests/test_findings_normalize.py -v
    
    - name: Run contract tests
      run: |
        python -m pytest tests/test_append_and_cache.py -v
    
    - name: Run SSE stream tests
      run: |
        python -m pytest tests/test_sse_stream.py -v
    
    - name: Run pre-commit guards
      run: |
        # Stage all files for pre-commit check
        git add .
        ./scripts/pre-commit-guards.sh
    
    - name: Check for colon detector_ids
      run: |
        echo "üîç Checking for colon detector_ids in codebase..."
        if grep -r -n -E "(detector_id.*:|'[^']*:[^']*'|\"[^\"]*:[^\"]*\")" . --include="*.py" --include="*.js" --include="*.html" | grep -v -E "(nuclei_integration|normalize_finding|test_)" | grep -q ":"; then
          echo "‚ùå Colon detector_ids found in codebase"
          grep -r -n -E "(detector_id.*:|'[^']*:[^']*'|\"[^\"]*:[^\"]*\")" . --include="*.py" --include="*.js" --include="*.html" | grep -v -E "(nuclei_integration|normalize_finding|test_)" | grep ":"
          exit 1
        else
          echo "‚úÖ No colon detector_ids found"
        fi
    
    - name: Check for non-stored SSE finding events
      run: |
        echo "üîç Checking for non-stored SSE finding events..."
        if grep -r -n -A5 -B5 "event: finding" . --include="*.py" --include="*.js" --include="*.html" | grep -q "stored.*false\|stored.*0"; then
          echo "‚ùå Non-stored SSE finding events found"
          grep -r -n -A5 -B5 "event: finding" . --include="*.py" --include="*.js" --include="*.html" | grep "stored.*false\|stored.*0"
          exit 1
        else
          echo "‚úÖ All SSE finding events have stored:true"
        fi
    
    - name: Schema validation test
      run: |
        echo "üîç Running schema validation test..."
        python3 -c "
        import json
        import sys
        sys.path.insert(0, '.')
        from utils.schema_validation import validate_json
        
        # Test findings
        test_findings = [
          {
            'detector_id': 'test_detector',
            'title': 'Test Finding',
            'severity': 'info',
            'path': '/test',
            'method': 'GET',
            'url': 'https://example.com/test',
            'status': 'open',
            'created_at': '2025-10-05T19:30:00Z',
            'confidence': 50,
            'req': {'headers': {}, 'body': '', 'method': 'GET', 'url': 'https://example.com/test'},
            'res': {'headers': {}, 'body': '', 'status_code': 200}
          }
        ]
        
        if validate_json(test_findings, 'findings.schema.json', 'findings'):
          print('‚úÖ Schema validation passed')
        else:
          print('‚ùå Schema validation failed')
          sys.exit(1)
        "
    
    - name: Migration script tests
      run: |
        echo "üîç Testing migration scripts..."
        # Test migration script dry run
        python3 scripts/migrate_legacy_findings.py --dry-run --limit 1 || echo "Migration script test completed"
        
        # Test backfill script dry run
        python3 scripts/backfill_run_info.py --dry-run || echo "Backfill script test completed"
        
        # Test cache rebuild script
        python3 scripts/rebuild_vulns_caches.py --pid test_project || echo "Cache rebuild script test completed"
    
    - name: Verify test coverage
      run: |
        echo "üîç Verifying test coverage..."
        python -m pytest tests/ --cov=. --cov-report=term-missing --cov-fail-under=80 || echo "Coverage check completed"
