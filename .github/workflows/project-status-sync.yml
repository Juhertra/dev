name: Project Status Sync
on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  pull_request:
    types: [opened, ready_for_review, closed, reopened]
permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  status_sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const isIssue = !!context.payload.issue;
            const isPR = !!context.payload.pull_request;

            const projectId = process.env.PROJECTS_V2_ID;
            if (!projectId) core.setFailed('PROJECTS_V2_ID missing');

            // Determine target content
            let node_id, number, labels = [];
            if (isIssue) { node_id = context.payload.issue.node_id; number = context.payload.issue.number; labels = (context.payload.issue.labels||[]).map(l=>l.name); }
            if (isPR)    { node_id = context.payload.pull_request.node_id; number = context.payload.pull_request.number; labels = (context.payload.pull_request.labels||[]).map(l=>l.name); }

            // Find existing item or add
            const addResp = await github.graphql(`
              mutation($project:ID!, $content:ID!){
                addProjectV2ItemById(input:{projectId:$project, contentId:$content}){ item { id } }
              }`,
              { project: projectId, content: node_id }
            );
            const itemId = addResp.addProjectV2ItemById.item.id;

            // Read fields
            const fieldsResp = await github.graphql(`
              query($project:ID!){
                node(id:$project){
                  ... on ProjectV2 {
                    fields(first:50){
                      nodes { id name dataType
                        ... on ProjectV2SingleSelectField { options { id name } }
                      }
                    }
                  }
                }
              }`,
              { project: projectId }
            );
            const fields = fieldsResp.node.fields.nodes;
            const statusField = fields.find(f => f.name === "Status" && f.dataType === "SINGLE_SELECT");
            if (!statusField) { core.info("No Status field present"); return; }

            // Map labels to status
            function desiredStatus() {
              if (labels.includes('status:Blocked')) return 'Blocked';
              if (isIssue && context.payload.action === 'opened') return 'Todo';
              if (isPR && context.payload.action === 'opened') return 'In Progress';
              if (labels.includes('status:In Progress')) return 'In Progress';
              if (labels.includes('status:Todo')) return 'Todo';
              if (isIssue && context.payload.action === 'closed') return 'Done';
              if (isPR && context.payload.action === 'closed' && context.payload.pull_request.merged) return 'Done';
              return null;
            }
            const statusName = desiredStatus();
            if (!statusName) { core.info('No status change'); return; }

            const opt = statusField.options.find(o => o.name.toLowerCase() === statusName.toLowerCase());
            if (!opt) { core.info(`Status option "${statusName}" not found`); return; }

            await github.graphql(`
              mutation($project:ID!, $item:ID!, $field:ID!, $option:ID!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$project, itemId:$item,
                  fieldId:$field, value:{ singleSelectOptionId:$option }
                }) { clientMutationId }
              }`,
              { project: projectId, item: itemId, field: statusField.id, option: opt.id }
            );
            core.info(`Set Project Status="${statusName}" for #${number}`);
        env:
          PROJECTS_V2_ID: ${{ secrets.PROJECTS_V2_ID }}