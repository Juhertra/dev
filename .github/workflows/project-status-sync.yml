name: Project Status Sync
on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [labeled, unlabeled, closed, merged]

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  sync_status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const contentId = context.payload.pull_request?.node_id || context.payload.issue?.node_id;
            if (!contentId) return;
            
            // Get the project item
            const projectItem = await github.graphql(`
              query($project:ID!, $content:ID!){
                node(id:$project){
                  ... on ProjectV2{
                    items(first:1, filter:{contentId:$content}){
                      nodes{
                        id
                        fieldValues(first:20){
                          nodes{
                            ... on ProjectV2ItemFieldSingleSelectValue{
                              field{
                                ... on ProjectV2SingleSelectField{
                                  name
                                }
                              }
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`,
              { project: process.env.PROJECTS_V2_ID, content: contentId }
            );
            
            if (!projectItem?.node?.items?.nodes?.[0]) return;
            
            const item = projectItem.node.items.nodes[0];
            const statusField = item.fieldValues.nodes.find(fv => 
              fv.field?.name === 'Status' || fv.field?.name === 'status'
            );
            
            if (!statusField) return;
            
            // Determine new status based on labels and PR state
            let newStatus = 'Todo';
            
            if (context.payload.pull_request) {
              if (context.payload.pull_request.merged) {
                newStatus = 'Done';
              } else if (context.payload.pull_request.state === 'closed') {
                newStatus = 'Done';
              } else if (context.payload.pull_request.labels?.some(l => l.name.includes('status:In Progress'))) {
                newStatus = 'In Progress';
              } else if (context.payload.pull_request.labels?.some(l => l.name.includes('status:Blocked'))) {
                newStatus = 'Blocked';
              }
            } else if (context.payload.issue) {
              if (context.payload.issue.labels?.some(l => l.name.includes('status:In Progress'))) {
                newStatus = 'In Progress';
              } else if (context.payload.issue.labels?.some(l => l.name.includes('status:Blocked'))) {
                newStatus = 'Blocked';
              } else if (context.payload.issue.labels?.some(l => l.name.includes('status:Done'))) {
                newStatus = 'Done';
              }
            }
            
            // Update project item status
            if (newStatus !== statusField.name) {
              await github.graphql(`
                mutation($project:ID!, $item:ID!, $field:ID!, $value:ID!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$project,
                    itemId:$item,
                    fieldId:$field,
                    value:{singleSelectOptionId:$value}
                  }){
                    projectV2Item{id}
                  }
                }`,
                { 
                  project: process.env.PROJECTS_V2_ID, 
                  item: item.id,
                  field: statusField.field.id,
                  value: statusField.field.options.find(opt => opt.name === newStatus)?.id
                }
              );
            }
        env:
          PROJECTS_V2_ID: ${{ secrets.PROJECTS_V2_ID }}