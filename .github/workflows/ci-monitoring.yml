name: ci-monitoring
on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:
    inputs:
      check_python314:
        description: 'Check Python 3.14 compatibility'
        required: false
        default: false
        type: boolean

jobs:
  monitor-ci-health:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check CI workflow health
        run: |
          echo "## M1 CI Health Check - $(date)" > ci-health-report.md
          echo "" >> ci-health-report.md
          
          # Check workflow files
          echo "### Workflow Files Status" >> ci-health-report.md
          for workflow in ruff pyright imports unit coverage contracts docs-health integration security-scan runtime-infrastructure; do
              if [ -f ".github/workflows/${workflow}.yml" ]; then
                  echo "‚úÖ ${workflow}.yml exists" >> ci-health-report.md
              else
                  echo "‚ùå ${workflow}.yml missing" >> ci-health-report.md
              fi
          done
          
          echo "" >> ci-health-report.md
          echo "### M1 Coverage Status" >> ci-health-report.md
          
          # Check coverage dashboard
          if [ -d "reports/coverage" ]; then
              latest_dashboard=$(ls -t reports/coverage/coverage-dashboard-*.html 2>/dev/null | head -1)
              if [ -n "$latest_dashboard" ]; then
                  echo "‚úÖ Latest coverage dashboard: $(basename $latest_dashboard)" >> ci-health-report.md
              else
                  echo "‚ö†Ô∏è  No coverage dashboard found" >> ci-health-report.md
              fi
          else
              echo "‚ùå Coverage reports directory missing" >> ci-health-report.md
          fi
          
          echo "" >> ci-health-report.md
          echo "### Recent CI Runs Analysis" >> ci-health-report.md
          
          # Get recent workflow runs
          gh run list --limit 20 --json status,conclusion,name,createdAt,workflowName >> recent-runs.json || echo "[]" > recent-runs.json
          
          # Analyze success rate and Python 3.14 compatibility
          python3 << 'EOF'
          import json
          import sys
          from datetime import datetime, timedelta
          
          try:
              with open('recent-runs.json', 'r') as f:
                  runs = json.load(f)
              
              if not runs:
                  print("No recent runs found")
                  sys.exit(0)
              
              # Calculate success rate for last 24 hours
              now = datetime.now()
              recent_runs = [r for r in runs if 
                  datetime.fromisoformat(r['createdAt'].replace('Z', '+00:00')) > 
                  now - timedelta(hours=24)]
              
              if recent_runs:
                  successful = len([r for r in recent_runs if r['conclusion'] == 'success'])
                  total = len(recent_runs)
                  success_rate = (successful / total) * 100
                  
                  print(f"üìä Last 24h Success Rate: {success_rate:.1f}% ({successful}/{total})")
                  
                  # Check for failing workflows
                  failed_workflows = [r['name'] for r in recent_runs if r['conclusion'] == 'failure']
                  if failed_workflows:
                      print(f"‚ö†Ô∏è  Failed workflows: {', '.join(set(failed_workflows))}")
                  else:
                      print("‚úÖ All workflows passing")
                  
                  # Check Python 3.14 compatibility
                  python314_runs = [r for r in recent_runs if '3.14' in r.get('name', '')]
                  if python314_runs:
                      python314_success = len([r for r in python314_runs if r['conclusion'] == 'success'])
                      python314_total = len(python314_runs)
                      python314_rate = (python314_success / python314_total) * 100
                      print(f"üêç Python 3.14 Compatibility: {python314_rate:.1f}% ({python314_success}/{python314_total})")
                  else:
                      print("üêç Python 3.14: No recent test runs")
              else:
                  print("No runs in last 24 hours")
                  
          except Exception as e:
              print(f"Error analyzing runs: {e}")
          EOF
      
      - name: Check Python 3.14 compatibility
        if: github.event.inputs.check_python314 == 'true'
        run: |
          echo "üêç Checking Python 3.14 compatibility..." >> ci-health-report.md
          
          # Test Python 3.14 syntax compatibility
          python3.14 --version || echo "Python 3.14 not available (expected)"
          
          # Check if our code works with Python 3.14
          python3.14 -c "
          import sys
          print(f'Python version: {sys.version}')
          
          # Test critical imports
          try:
              import cryptography
              print('‚úÖ cryptography: OK')
          except Exception as e:
              print(f'‚ùå cryptography: {e}')
          
          try:
              import requests
              print('‚úÖ requests: OK')
          except Exception as e:
              print(f'‚ùå requests: {e}')
          
          try:
              import flask
              print('‚úÖ flask: OK')
          except Exception as e:
              print(f'‚ùå flask: {e}')
          " || echo "Python 3.14 compatibility check failed (expected during transition)"
      
      - name: Upload CI health report
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-report-m1
          path: |
            ci-health-report.md
            recent-runs.json
          retention-days: 30
      
      - name: Create issue if CI health is poor
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the health report
            let healthReport = '';
            try {
              healthReport = fs.readFileSync('ci-health-report.md', 'utf8');
            } catch (e) {
              healthReport = 'M1 CI health check failed to generate report';
            }
            
            // Create issue
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® M1 CI Health Check Failed',
              body: `## M1 CI Health Alert\n\n${healthReport}\n\n**Action Required**: Please investigate M1 CI workflow issues.\n\n---\n*This issue was automatically created by the M1 CI monitoring workflow.*`,
              labels: ['ci', 'monitoring', 'm1', 'urgent']
            });
