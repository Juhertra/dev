name: Project Sync
on:
  issues:        { types: [opened, edited, labeled, reopened] }
  pull_request:  { types: [opened, edited, labeled, ready_for_review, reopened] }
permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write
jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Add item to Projects v2 and set Status=Todo
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const projectId = process.env.PROJECTS_V2_ID;
            if (!projectId) core.setFailed("PROJECTS_V2_ID secret is missing");
            const pr = context.payload.pull_request;
            const issue = context.payload.issue;
            const contentId = pr?.node_id || issue?.node_id;
            if (!contentId) { core.info("No content node_id (not an issue/PR)"); return; }

            // 1) Add to project
            const addResp = await github.graphql(`
              mutation($project:ID!, $content:ID!){
                addProjectV2ItemById(input:{projectId:$project, contentId:$content}){
                  item { id }
                }
              }`, { project: projectId, content: contentId });
            const itemId = addResp.addProjectV2ItemById.item.id;

            // 2) Set Status=Todo if field exists
            const fieldsResp = await github.graphql(`
              query($project:ID!){
                node(id:$project){
                  ... on ProjectV2 {
                    fields(first:50){
                      nodes { id name dataType
                        ... on ProjectV2SingleSelectField { options { id name } }
                      }
                    }
                  }
                }
              }`, { project: projectId });
            const fields = fieldsResp.node.fields.nodes;
            const statusField = fields.find(f => f.name === "Status" && f.dataType === "SINGLE_SELECT");
            if (!statusField) { core.info("No Status field found; skipping"); return; }
            const todo = statusField.options.find(o => o.name.toLowerCase() === "todo");
            if (!todo) { core.info("No 'Todo' option; skipping"); return; }

            await github.graphql(`
              mutation($project:ID!, $item:ID!, $field:ID!, $option:ID!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$project, itemId:$item,
                  fieldId:$field, value:{ singleSelectOptionId:$option }
                }) { clientMutationId }
              }`, { project: projectId, item: itemId, field: statusField.id, option: todo.id });
            core.info(`Added ${contentId} to project ${projectId} and set Status=Todo`);
        env:
          PROJECTS_V2_ID: ${{ secrets.PROJECTS_V2_ID }}
