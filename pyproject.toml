[tool.poetry]
name = "secflow"
version = "0.0.1"
description = "SecFlow security testing platform"
authors = ["SecFlow Team"]
readme = "README.md"
packages = [{ include = "secflow" }]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.7"
# M1 Dependencies
cryptography = "^43.0"  # For security signing
requests = "^2.32"      # For HTTP operations
pyyaml = "^6.0"         # For YAML processing
flask = "^3.0"          # For web framework
jsonschema = "^4.0"     # For schema validation

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pytest-cov = "^5.0"
coverage = {extras = ["toml"], version = "^7.0"}
ruff = "^0.5.0"
pyright = "^1.1.377"
import-linter = "^2.0"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"
# M1 Development Dependencies
pytest-xdist = "^3.0"   # For parallel test execution
pytest-mock = "^3.0"    # For advanced mocking
pytest-timeout = "^2.0" # For test timeouts
bandit = {extras = ["toml"], version = "^1.7"}  # For security scanning
safety = "^3.0"         # For dependency vulnerability scanning

[tool.pytest.ini_options]
addopts = "-q"
markers = [
    "unit: Unit tests - fast, isolated tests",
    "integration: Integration tests - test component interactions", 
    "e2e: End-to-end tests - test complete workflows",
    "slow: Slow running tests - may take > 5 seconds",
    "security: Security-related tests - plugin security, signing, sandboxing",
    "workflow: Workflow engine tests - workflow execution and management",
    "plugin: Plugin system tests - plugin loading, execution, discovery",
    "coverage: Coverage-related tests - test coverage measurement",
    "performance: Performance tests - test system performance",
    "network: Network-dependent tests - require network access",
    "filesystem: Filesystem-dependent tests - require file system access"
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/e2e/*",
    "*/examples/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011"]

[tool.pyright]
include = ["."]
exclude = ["**/node_modules", "**/__pycache__"]
pythonVersion = "3.11"
pythonPlatform = "Linux"
typeCheckingMode = "basic"
