 * Serving Flask app 'app'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5001
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/app.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
127.0.0.1 - - [04/Oct/2025 17:58:50] "GET / HTTP/1.1" 200 -
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/app.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/site-packages/urllib3/connectionpool.py:1097: InsecureRequestWarning: Unverified HTTPS request is being made to host 'raw.githubusercontent.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
127.0.0.1 - - [04/Oct/2025 17:59:51] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 17:59:51] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 17:59:51] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 17:59:51] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 17:59:52] "GET /favicon.ico HTTP/1.1" 404 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:41] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:46] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:46] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:46] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:46] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:52] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:52] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:52] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:52] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:58] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/active-testing HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:01:59] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:59] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:01:59] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:00] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/templates?all=1 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:00] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/status HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:00] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue/summary HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:01] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/templates/manager HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:01] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:01] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:01] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:01] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/templates/status HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:02] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:02:02] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:02] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:02:02] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:04:54] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:04:54] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:04:54] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:04:54] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:04:58] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:04:58] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:04:58] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:04:58] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:01] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:05:01] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:01] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:01] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:05:03] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:19] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:19] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:19] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:19] "GET /static/main.js HTTP/1.1" 200 -
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/routes/sitemap.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
127.0.0.1 - - [04/Oct/2025 18:06:23] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:23] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:23] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:23] "GET /static/main.js HTTP/1.1" 304 -
/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/site-packages/urllib3/connectionpool.py:1097: InsecureRequestWarning: Unverified HTTPS request is being made to host 'raw.githubusercontent.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
127.0.0.1 - - [04/Oct/2025 18:06:26] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:26] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:26] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:26] "GET /static/main.js HTTP/1.1" 304 -
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/routes/sitemap.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/routes/sitemap.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/site-packages/urllib3/connectionpool.py:1097: InsecureRequestWarning: Unverified HTTPS request is being made to host 'raw.githubusercontent.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:36] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:39] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:06:39] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:39] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:06:39] "GET /static/main.css HTTP/1.1" 304 -
[2025-10-04 18:06:40,738] INFO in sitemap: DOSSIER_READ key="PUT /pet/pet" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/PUT__pet_pet.json" count=0
127.0.0.1 - - [04/Oct/2025 18:06:40] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap/endpoint-runs HTTP/1.1" 200 -
 * Detected change in '/Users/hernan.trajtemberg/Documents/Test/dev/routes/sitemap.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 115-972-514
/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/site-packages/urllib3/connectionpool.py:1097: InsecureRequestWarning: Unverified HTTPS request is being made to host 'raw.githubusercontent.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/tokens.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/main.js HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:02] "GET /static/main.css HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:12] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap/endpoint-preview HTTP/1.1" 200 -
[2025-10-04 18:08:17,753] INFO in sitemap: DOSSIER_READ key="PUT /pet/pet" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/PUT__pet_pet.json" count=0
127.0.0.1 - - [04/Oct/2025 18:08:17] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap/endpoint-runs HTTP/1.1" 200 -
[2025-10-04 18:08:22,231] INFO in sitemap: DOSSIER_READ key="GET /store/inventory/store/inventory" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET__store_inventory_store_inventory.json" count=0
127.0.0.1 - - [04/Oct/2025 18:08:22] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap/endpoint-runs HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:27] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:41] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/active-testing HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:41] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:41] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:41] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:08:41] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/templates?all=1 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:42] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/status HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:42] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue/summary HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:08:47] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/profiles HTTP/1.1" 200 -
Getting runtime for project ec4c0976-fd94-463c-8ada-0705fe12b944
Session: {'proxy': None, 'verify': False, 'bearer': None}
SPECS keys: ['https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27']
QUEUE length: 19
Processing 19 queue items...
Processing item 0: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 0, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
127.0.0.1 - - [04/Oct/2025 18:09:24] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/stream?run_id=run_1759590564242&severity=critical&severity=high&severity=medium&severity=low&severity=info&templates=expired-ssl HTTP/1.1" 200 -
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet', 'method': 'PUT', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["ELeXxslv"], "tags": [{"id": 822, "name": "vCssRR8b"}]}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 0}
Processing item 1: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 1, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["fOkIhkip"], "tags": [{"id": 96, "name": "6YosuODE"}]}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 1}
Processing item 2: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 2, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/findByStatus', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 2}
Processing item 3: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 3, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/findByTags', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 3}
Processing item 4: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 4, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/109', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 4}
Processing item 5: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 5, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/273', 'method': 'POST', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 5}
Processing item 6: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 6, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/372', 'method': 'DELETE', 'headers': {'Accept': 'application/json', 'api_key': 'Oy0XJRj5'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 6}
Processing item 7: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 7, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}Traceback (most recent call last):
  File "/Users/hernan.trajtemberg/Documents/Test/dev/nuclei_integration.py", line 306, in scan_project_endpoints
    body = preview.get('data') if isinstance(preview.get('data'), str) else json.dumps(preview.get('data'))
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type bytes is not JSON serializable

Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Error building preview URL: Object of type bytes is not JSON serializable
Processing item 8: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 8, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/inventory', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 8}
Processing item 9: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 9, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "petId": 198772, "quantity": 7}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 9}
Processing item 10: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 10, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order/335', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 10}
Processing item 11: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 11, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order/725', 'method': 'DELETE', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 11}
Processing item 12: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 12, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "username": "theUser", "firstName": "John"}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 12}
Processing item 13: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 13, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/createWithList', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '[{"id": 10, "username": "theUser", "firstName": "John"}]', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 13}
Processing item 14: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 14, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/login', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 14}
Processing item 15: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 15, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/logout', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 15}
Processing item 16: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 16, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/hqi1BYx6', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 16}
Processing item 17: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 17, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/tz5Vivg8', 'method': 'PUT', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "username": "theUser", "firstName": "John"}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 17}
Processing item 18: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 18, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/BO5yFVZM', 'method': 'DELETE', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 18}
Starting Nuclei scan of 19 endpoints...
Endpoints: ['https://petstore3.swagger.io/api/v3/pet', 'https://petstore3.swagger.io/api/v3/pet', 'https://petstore3.swagger.io/api/v3/pet/findByStatus']...
Running real Nuclei scan...
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590564.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["ELeXxslv"], "tags": [{"id": 822, "name": "vCssRR8b"}]} -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590565.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590566.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590567.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["fOkIhkip"], "tags": [{"id": 96, "name": "6YosuODE"}]} -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590568.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590569.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590570.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590571.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590572.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590573.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590575.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590575.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590576.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590577.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590578.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590579.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H api_key: Oy0XJRj5 -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590579.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590580.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590581.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590582.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] [2025-10-04 18:10:08,580] INFO in nuclei: DOSSIER_WRITE key="PUT https://petstore3.swagger.io/api/v3/pet" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/PUT_https_petstore3.swagger.io_api_v3_pet.json"
[2025-10-04 18:10:08,581] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/pet" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_pet.json"
[2025-10-04 18:10:08,581] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/pet/findByStatus" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_pet_findByStatus.json"
[2025-10-04 18:10:08,582] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/pet/findByTags" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_pet_findByTags.json"
[2025-10-04 18:10:08,582] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/pet/109" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_pet_109.json"
[2025-10-04 18:10:08,582] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/pet/273" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_pet_273.json"
[2025-10-04 18:10:08,583] INFO in nuclei: DOSSIER_WRITE key="DELETE https://petstore3.swagger.io/api/v3/pet/372" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/DELETE_https_petstore3.swagger.io_api_v3_pet_372.json"
[2025-10-04 18:10:08,583] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/pet/458/uploadImage" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_pet_458_uploadImage.json"
[2025-10-04 18:10:08,584] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/store/inventory" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_store_inventory.json"
[2025-10-04 18:10:08,584] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/store/order" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_store_order.json"
[2025-10-04 18:10:08,585] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/store/order/335" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_store_order_335.json"
[2025-10-04 18:10:08,585] INFO in nuclei: DOSSIER_WRITE key="DELETE https://petstore3.swagger.io/api/v3/store/order/725" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/DELETE_https_petstore3.swagger.io_api_v3_store_order_725.json"
[2025-10-04 18:10:08,586] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/user" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_user.json"
[2025-10-04 18:10:08,586] INFO in nuclei: DOSSIER_WRITE key="POST https://petstore3.swagger.io/api/v3/user/createWithList" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST_https_petstore3.swagger.io_api_v3_user_createWithList.json"
[2025-10-04 18:10:08,586] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/user/login" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_user_login.json"
[2025-10-04 18:10:08,587] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/user/logout" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_user_logout.json"
[2025-10-04 18:10:08,587] INFO in nuclei: DOSSIER_WRITE key="GET https://petstore3.swagger.io/api/v3/user/hqi1BYx6" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/GET_https_petstore3.swagger.io_api_v3_user_hqi1BYx6.json"
[2025-10-04 18:10:08,587] INFO in nuclei: DOSSIER_WRITE key="PUT https://petstore3.swagger.io/api/v3/user/tz5Vivg8" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/PUT_https_petstore3.swagger.io_api_v3_user_tz5Vivg8.json"
[2025-10-04 18:10:08,588] INFO in nuclei: DOSSIER_WRITE key="DELETE https://petstore3.swagger.io/api/v3/user/BO5yFVZM" run="run_1759590564242" findings=0 worst="info" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/DELETE_https_petstore3.swagger.io_api_v3_user_BO5yFVZM.json"
127.0.0.1 - - [04/Oct/2025 18:10:08] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/scan HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:13] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:13] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:13] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:13] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:28] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:31] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:31] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:31] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:31] "GET /static/main.css HTTP/1.1" 304 -
[2025-10-04 18:10:34,672] INFO in sitemap: DOSSIER_READ key="POST /user/user" file="/Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/endpoints/POST__user_user.json" count=0
127.0.0.1 - - [04/Oct/2025 18:10:34] "POST /p/ec4c0976-fd94-463c-8ada-0705fe12b944/sitemap/endpoint-runs HTTP/1.1" 200 -
[2025-10-04 18:10:38,627] INFO in sitemap: RUNS_INDEX pid="ec4c0976-fd94-463c-8ada-0705fe12b944" count=29
127.0.0.1 - - [04/Oct/2025 18:10:38] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/runs HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:38] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:38] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:38] "GET /static/main.css HTTP/1.1" 304 -
[2025-10-04 18:10:48,946] INFO in sitemap: RUNS_INDEX pid="ec4c0976-fd94-463c-8ada-0705fe12b944" count=29
127.0.0.1 - - [04/Oct/2025 18:10:48] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/runs?sort=when_desc HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:49] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:49] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:49] "GET /static/main.js HTTP/1.1" 304 -
[2025-10-04 18:10:50,497] INFO in sitemap: RUNS_INDEX pid="ec4c0976-fd94-463c-8ada-0705fe12b944" count=29
127.0.0.1 - - [04/Oct/2025 18:10:50] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/runs?sort=run_id HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:50] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:50] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:50] "GET /static/main.js HTTP/1.1" 304 -
[2025-10-04 18:10:51,782] INFO in sitemap: RUNS_INDEX pid="ec4c0976-fd94-463c-8ada-0705fe12b944" count=29
127.0.0.1 - - [04/Oct/2025 18:10:51] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/runs?sort=endpoint HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:52] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:52] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:52] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/templates/manager HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/templates/status HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/active-testing HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:10:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/templates?all=1 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:11:00] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/status HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:11:00] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/queue/summary HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:11:17] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/profiles HTTP/1.1" 200 -
nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590584.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590584.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590585.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590586.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "petId": 198772, "quantity": 7} -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590587.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590588.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590589.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590590.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590592.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590592.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590593.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590564242.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590594.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "username": "theUser", "firstName": "John"} -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590597.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body=[{"id": 10, "username": "theUser", "firstName": "John"}] -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590599.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590601.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590602.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590604.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "username": "theUser", "firstName": "John"} -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590606.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/ssl/expired-ssl.yaml -severity critical,high,medium,low,info -include-rr
Real Nuclei scan completed. Found 0 findings.
Getting runtime for project ec4c0976-fd94-463c-8ada-0705fe12b944
Session: {'proxy': None, 'verify': False, 'bearer': None}
SPECS keys: ['https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27']
QUEUE length: 19
Processing 19 queue items...
Processing item 0: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 0, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
127.0.0.1 - - [04/Oct/2025 18:11:29] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/nuclei/stream?run_id=run_1759590689204&severity=critical&severity=high&severity=medium&severity=low&severity=info&templates=9.1.3&templates=5.1.2 HTTP/1.1" 200 -
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet', 'method': 'PUT', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["ELeXxslv"], "tags": [{"id": 822, "name": "vCssRR8b"}]}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 0}
Processing item 1: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 1, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["fOkIhkip"], "tags": [{"id": 96, "name": "6YosuODE"}]}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 1}
Processing item 2: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 2, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/findByStatus', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 2}
Processing item 3: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 3, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/findByTags', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 3}
Processing item 4: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 4, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/109', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 4}
Processing item 5: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 5, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/273', 'method': 'POST', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 5}
Processing item 6: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 6, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/pet/372', 'method': 'DELETE', 'headers': {'Accept': 'application/json', 'api_key': 'Oy0XJRj5'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 6}
Processing item 7: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 7, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}Traceback (most recent call last):
  File "/Users/hernan.trajtemberg/Documents/Test/dev/nuclei_integration.py", line 306, in scan_project_endpoints
    body = preview.get('data') if isinstance(preview.get('data'), str) else json.dumps(preview.get('data'))
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type bytes is not JSON serializable

Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Error building preview URL: Object of type bytes is not JSON serializable
Processing item 8: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 8, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/inventory', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 8}
Processing item 9: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 9, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "petId": 198772, "quantity": 7}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 9}
Processing item 10: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 10, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order/335', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 10}
Processing item 11: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 11, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/store/order/725', 'method': 'DELETE', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 11}
Processing item 12: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 12, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "username": "theUser", "firstName": "John"}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 12}
Processing item 13: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 13, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/createWithList', 'method': 'POST', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '[{"id": 10, "username": "theUser", "firstName": "John"}]', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 13}
Processing item 14: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 14, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/login', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 14}
Processing item 15: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 15, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/logout', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 15}
Processing item 16: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 16, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/hqi1BYx6', 'method': 'GET', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 16}
Processing item 17: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 17, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/tz5Vivg8', 'method': 'PUT', 'headers': {'Accept': 'application/json', 'Content-Type': 'application/json'}, 'body': '{"id": 10, "username": "theUser", "firstName": "John"}', 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 17}
Processing item 18: {'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'idx': 18, 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'override': None}
Found spec: {'url': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml', 'title': 'Swagger Petstore - OpenAPI 3.0', 'version': '1.0.27', 'base_url': 'https://petstore3.swagger.io/api/v3', 'ops': [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}], 'spec': {'openapi': '3.0.4', 'info': {'title': 'Swagger Petstore - OpenAPI 3.0', 'description': "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)", 'termsOfService': 'https://swagger.io/terms/', 'contact': {'email': 'apiteam@swagger.io'}, 'license': {'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'}, 'version': '1.0.27'}, 'externalDocs': {'description': 'Find out more about Swagger', 'url': 'https://swagger.io'}, 'servers': [{'url': 'https://petstore3.swagger.io/api/v3'}], 'tags': [{'name': 'pet', 'description': 'Everything about your Pets', 'externalDocs': {'description': 'Find out more', 'url': 'https://swagger.io'}}, {'name': 'store', 'description': 'Access to Petstore orders', 'externalDocs': {'description': 'Find out more about our store', 'url': 'https://swagger.io'}}, {'name': 'user', 'description': 'Operations about user'}], 'paths': {'/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error'}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'x-swagger-router-controller': 'OrderController', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error'}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error'}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'x-swagger-router-controller': 'OrderController', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.', 'x-swagger-router-controller': 'OrderController', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error'}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'x-swagger-router-controller': 'UserController', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error'}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error'}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error'}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'x-swagger-router-controller': 'UserController', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error'}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error'}}}}}, 'components': {'schemas': {'Order': {'x-swagger-router-model': 'io.swagger.petstore.model.Order', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'x-swagger-router-model': 'io.swagger.petstore.model.Category', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'x-swagger-router-model': 'io.swagger.petstore.model.User', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'x-swagger-router-model': 'io.swagger.petstore.model.Tag', 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'x-swagger-router-model': 'io.swagger.petstore.model.Pet', 'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}}, 'requestBodies': {'Pet': {'description': 'Pet object that needs to be added to the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, 'UserArray': {'description': 'List of user object', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, 'securitySchemes': {'petstore_auth': {'type': 'oauth2', 'flows': {'implicit': {'authorizationUrl': 'https://petstore3.swagger.io/oauth/authorize', 'scopes': {'write:pets': 'modify pets in your account', 'read:pets': 'read your pets'}}}}, 'api_key': {'type': 'apiKey', 'name': 'api_key', 'in': 'header'}}}}, 'safe_id': 'https___raw_githubusercontent_com_swagger-api_swagger-petstore_refs_heads_master_src_main_resources_openapi_yaml_Swagger_Petstore_-_OpenAPI_3_0_1_0_27'}
Operations: [{'operationId': 'updatePet', 'summary': 'Update an existing pet.', 'path': '/pet', 'method': 'PUT', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'addPet', 'summary': 'Add a new pet to the store.', 'path': '/pet', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}}, {'operationId': 'findPetsByStatus', 'summary': 'Finds Pets by status.', 'path': '/pet/findByStatus', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': True, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'requestBody': None}, {'operationId': 'findPetsByTags', 'summary': 'Finds Pets by tags.', 'path': '/pet/findByTags', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': True, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'requestBody': None}, {'operationId': 'getPetById', 'summary': 'Find pet by ID.', 'path': '/pet/{petId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'updatePetWithForm', 'summary': 'Updates a pet in the store with form data.', 'path': '/pet/{petId}', 'method': 'POST', 'hasBody': False, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'deletePet', 'summary': 'Deletes a pet.', 'path': '/pet/{petId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'uploadFile', 'summary': 'Uploads an image.', 'path': '/pet/{petId}/uploadImage', 'method': 'POST', 'hasBody': True, 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}}, {'operationId': 'getInventory', 'summary': 'Returns pet inventories by status.', 'path': '/store/inventory', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'placeOrder', 'summary': 'Place an order for a pet.', 'path': '/store/order', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}}, {'operationId': 'getOrderById', 'summary': 'Find purchase order by ID.', 'path': '/store/order/{orderId}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'deleteOrder', 'summary': 'Delete purchase order by identifier.', 'path': '/store/order/{orderId}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'requestBody': None}, {'operationId': 'createUser', 'summary': 'Create user.', 'path': '/user', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'createUsersWithListInput', 'summary': 'Creates list of users with given input array.', 'path': '/user/createWithList', 'method': 'POST', 'hasBody': True, 'parameters': [], 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}}, {'operationId': 'loginUser', 'summary': 'Logs user into the system.', 'path': '/user/login', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'logoutUser', 'summary': 'Logs out current logged in user session.', 'path': '/user/logout', 'method': 'GET', 'hasBody': False, 'parameters': [], 'requestBody': None}, {'operationId': 'getUserByName', 'summary': 'Get user by user name.', 'path': '/user/{username}', 'method': 'GET', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}, {'operationId': 'updateUser', 'summary': 'Update user resource.', 'path': '/user/{username}', 'method': 'PUT', 'hasBody': True, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}}, {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}]
Operation: {'operationId': 'deleteUser', 'summary': 'Delete user resource.', 'path': '/user/{username}', 'method': 'DELETE', 'hasBody': False, 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': None}
Session: {'proxy': None, 'verify': False, 'bearer': None}
Added endpoint: {'url': 'https://petstore3.swagger.io/api/v3/user/BO5yFVZM', 'method': 'DELETE', 'headers': {'Accept': 'application/json'}, 'body': None, 'spec_id': 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/refs/heads/master/src/main/resources/openapi.yaml|Swagger Petstore - OpenAPI 3.0|1.0.27', 'op_index': 18}
Starting Nuclei scan of 19 endpoints...
127.0.0.1 - - [04/Oct/2025 18:13:51] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:13:51] "GET /static/tokens.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:13:51] "GET /static/main.js HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:13:51] "GET /static/main.css HTTP/1.1" 304 -
127.0.0.1 - - [04/Oct/2025 18:13:59] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings/46 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:14:13] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings/44 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:14:23] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings/45 HTTP/1.1" 200 -
127.0.0.1 - - [04/Oct/2025 18:14:28] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings/28 HTTP/1.1" 200 -
Endpoints: ['https://petstore3.swagger.io/api/v3/pet', 'https://petstore3.swagger.io/api/v3/pet', 'https://petstore3.swagger.io/api/v3/pet/findByStatus']...
Running real Nuclei scan...
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590689.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["ELeXxslv"], "tags": [{"id": 822, "name": "vCssRR8b"}]} -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590690.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590709.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H Content-Type: application/json -V body={"id": 10, "name": "doggie", "category": {"id": 1, "name": "Dogs"}, "photoUrls": ["fOkIhkip"], "tags": [{"id": 96, "name": "6YosuODE"}]} -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590710.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590730.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590730.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590750.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590750.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590770.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590770.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590790.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590791.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590810.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590811.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -H api_key: Oy0XJRj5 -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590830.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590831.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590851.txt -j -silent -timeout 30 -retries 1 -irr -fr -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr -markdown-export /Users/hernan.trajtemberg/Documents/Test/dev/ui_projects/ec4c0976-fd94-463c-8ada-0705fe12b944/runs/run_1759590689204.rr
[NUCLEI CMD] nuclei -l /var/folders/0w/qhfw13151_q_hsqzxk_pz8243ky1vh/T/nuclei_output_i6ck5tcu/input_1759590852.txt -j -silent -timeout 30 -retries 1 -irr -fr -H Accept: application/json -t /Users/hernan.trajtemberg/nuclei-templates/asvs/9.1.3.yaml -t /Users/hernan.trajtemberg/nuclei-templates/asvs/5.1.2.yaml -severity critical,high,medium,low,info -include-rr
[NUCLEI CMD] 127.0.0.1 - - [04/Oct/2025 18:14:35] "GET /p/ec4c0976-fd94-463c-8ada-0705fe12b944/findings/12 HTTP/1.1" 200 -
/Users/hernan.trajtemberg/.pyenv/versions/3.9.16/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
